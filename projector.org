* The Projector (Fourier-Motzkin)
  :PROPERTIES:
  :ID:       68f91b13-7003-4091-b3b0-55315e9d516c
  :END:

** General structure
   :PROPERTIES:
   :ID:       b929f0e7-13d9-48df-bfe7-6d3a5233927a
   :END:
The parameters are ~c~, the matrix of equalities and inequalities,
~ne~ the number of equalities (which are all at the beginning) and
~nv~ the number of variables onto which to project (and they are at
positions 1 to ~nv~ since column 0 has the constant side.)

First, use all ~ne~ equalities to eliminate ~ne~ variables (starting
from the right).  Decide which variable to eliminate next. (In time we
can think to optimize the choice.)

Sort the matrix on the coefficient of that variable. For every pair of
one negative and one positive coefficient, generate the new
inequality. (This we will do in parallel, eventually.)

Then get rid of redundancy. (Eventually.)

Rinse and repeat until only ~nv~ variables are left. (Every
coefficient past ~nv~ is zero.)

There must be a final redundancy elimination, which must be
perfect. And also a reduction to "smallest" integer
coefficient. (Maybe take out the gcd from every row).


*** DONE Reduce equations

Eliminate variables from the system using the ~ne~ equations.

This function assumes the user is not an idiot.  We need to fix this
eventually.
#+BEGIN_SRC lisp 
  (defun first-non-zero (row nv)
    "First non-zero position past nv."
    (do ((i (1+ nv) (1+ i)))
        ((not (zerop (aref row i))) i)))
#+END_SRC

#+RESULTS:
: FIRST-NON-ZERO

#+BEGIN_SRC lisp
(equalp 7 (first-non-zero #(1 0 0 0 0 0 0 2 0 2 4) 1))
#+END_SRC

#+RESULTS:
: T

#+BEGIN_SRC lisp
  (defun zero-out (dest source pos)
    "In-place, update the destination if coefficient at pos is non-zero."
    (when (not (zerop (aref dest pos)))
      (let* ((a (aref source pos))
             (b (aref dest pos))
             (c (/ (- b) a)))
        (kaplusb c source dest))))
#+END_SRC

#+RESULTS:
: ZERO-OUT

#+BEGIN_SRC lisp
(equalp #(11 1 4 0) (zero-out #(6 0 2 1) #(5 1 2 -1) 3))
#+END_SRC

#+RESULTS:
: T


#+BEGIN_SRC lisp
  (defun kaplusb (k a b)
    (dotimes (i (length a) b)
      (incf (aref b i) (* k (aref a i)))))
#+END_SRC

#+RESULTS:
: KAPLUSB

#+BEGIN_SRC lisp
(equalp #(2 4 7) (let ((dest #(0 0 1))) (kaplusb 2 #(1 2 3) dest) dest))
#+END_SRC

#+RESULTS:
: NIL


#+BEGIN_SRC lisp
  (defun eliminate-equations (C ne nv)
    (do ((i 0 (1+ i))
         (row (car C) (car C))
         (C C (cdr C)))
        ((= i ne) C)
      (let ((pos (first-non-zero row nv)))
        (normalize-row row pos)
        (dolist (other-row (cdr C))
          (zero-out other-row row pos)))))
#+END_SRC

#+RESULTS:
: ELIMINATE-EQUATIONS

*** DONE Normalize

Consider $x_i$ to be the variable currently being eliminated.  Divide
every inequality where the coefficient of $x_i$ is nonzero by that
coefficient.  The end result of this step should leave every
inequality such that the new coefficient on $x_i$ is one of three
options: 1, -1, or zero.

(This process can definitely be its own function but its efficiency
may need to be considered.)

#+BEGIN_SRC lisp
(defun divide-row (row divisor)
    (loop for i from 0 below (length row)
             do (setf (aref row i) (/ (aref row i) divisor)))) ; ditch this double aref!

(defun normalize-row (row pos)
    (let ((a (abs (aref row pos))))
     (when (not (zerop a))
         (divide-row row a)))) 

(defun normalize (C pos)
    (map 'list (lambda (x) (normalize-row x pos)) C))


#+END_SRC

#+RESULTS:
: NORMALIZE

*** DONE Partition and Compare

**** DONE Partition

Ignore henceforth inequalities containing a coefficient of zero on
$x_i$.  Construct two sets, ~Pos~ and ~Neg~, such that every
inequality belongs to one or the other depending on the sign of the
coefficient on $x_i$. The parameter ~xi~ is the address of the
coefficient on $x_i$ in ~C~ and probably needs to be renamed for
better readability.

#+BEGIN_SRC lisp
(defun partition (C xi)
    (loop for row in C
      if (< (aref row xi) 0)
      collect row into neg          ; kind of a nasty hack, there
      else if (> (aref row xi) 0)   ; may be a better way to
      collect row into pos          ; go about the partitioning
      else if (zerop (aref row xi))
      collect row into naught
      finally (return (values pos neg naught))))

#+END_SRC

#+RESULTS:
: PARTITION


**** DONE Compare

For every pair of inequalities $p_i$ and $n_i$, where $p_i \in$ ~Pos~
and $n_i \in$ ~Neg~, take the sum (row addition in the matrix). Append
the resulting inequality to the matrix.

#+BEGIN_SRC lisp
(defun compare (C xi)
    (multiple-value-bind (pos neg naught) (partition C xi)
      (let ((res naught))
      (progn
        (loop for p in pos do ; there MUST be a better way...
          (loop for n in neg do
          (cons (map 'vector + p n) res)))
        res))))
#+END_SRC

#+RESULTS:
: COMPARE

**** DONE Removal

Delete every row from the matrix who belonged to ~Pos~ or ~Neg~.  The
only rows not used at this point (and thus, the rows that must remain)
are those that had a coefficient of zero on $x_i$ to begin with. So,
the new matrix will be the union of the following: rows from the
original with the mentioned zero coefficient, and the result of
~compare~.

At the end of each comparison and removal, the matrix present
represents a set of equalities and inequalities with $x_i$ eliminated.

#+BEGIN_SRC lisp
(defun removal (C xi) ; DEPRECATED; post-compare garbage collection ought to handle this
    (if C
        (if (zerop (aref (car C) xi))
            (cons (car C) (removal (cdr C) xi)) ; keep it, continue to the rest
            (removal (cdr C) xi)) ; toss it, continue to the rest
        nil))
#+END_SRC

#+RESULTS:
: REMOVAL

And finally, the whole elimination step for one variable: (thought:
how can we best keep track of number of equations in C? discuss
monday)



*** Experiment
#+BEGIN_SRC lisp
(defun vars-to-elim (C nv) ; returns a sequence of the positions of variables 
                           ; to be eliminated, currently right to left
        (reverse (number-sequence (+ nv 1) (- (length (car C)) 1))))

#+END_SRC

#+RESULTS:
: VARS-TO-ELIM

#+BEGIN_SRC lisp
(defun project_rec (C nv i)
    (if (< (+ nv 1) i) ; if we're into the variables we're supposed to keep, stop
        C
        (project_rec (compare C i) nv (- i 1)))) ; elim a var, decrement i, keep going

(defun project_top (C nv)
    (project_rec C nv (- (length (car C)) 1)))
#+END_SRC

#+RESULTS:
: PROJECT_TOP

#+BEGIN_SRC lisp
(defun redundancy-trim (C)
    (remove-duplicates C :test #'equalp))

#+END_SRC

#+RESULTS:
: REDUNDANCY-TRIM

#+BEGIN_SRC lisp
(defun gcd-row (row) ; thank Euclid for the GCD being associative
    (let ((rowlist (loop for x across row collect x)))
         (reduce (lambda (x y) (gcd x y)) rowlist)))

#+END_SRC

#+RESULTS:
: GCD-ROW

#+BEGIN_SRC lisp
(defun divide-by-gcd (row)
         (progn (divide-row row (gcd-row row)) ; row your boat
                row))

(defun coeff-reduction (C)
    (if C
        (cons (divide-by-gcd (car C)) (coeff-reduction (cdr C)))
        C))

#+END_SRC

#+RESULTS:
: COEFF-REDUCTION

#+BEGIN_SRC lisp
(equalp #(1 3 2 10) (let ((row (divide-by-gcd #(3 9 6 30)))) row))

#+END_SRC

#+RESULTS:
: NIL



** Project

#+BEGIN_SRC lisp
(defun project (C ne nv)
    (let ((Cprime (eliminate-equations C ne nv)))
         (redundancy-trim (coeff-reduction (project_top Cprime nv)))))
#+END_SRC

#+RESULTS:
: PROJECT

#+BEGIN_SRC lisp
(defun project_test (C ne nv)
    (let ((Cprime (eliminate-equations C ne nv)))
         (project_top Cprime nv)))

#+END_SRC

#+RESULTS:
: PROJECT_TEST


#+BEGIN_SRC lisp :session :results output
  (let ((param '(1 2 2 2))
        (generator #'gen-at-least))
    (multiple-value-bind (C ne nv) (apply generator param)
      (project_test C ne nv) 0 nv))
#+END_SRC

#+RESULTS:
================#+END_SRC


#+BEGIN_COMMENT
#### at_least_1(x_1,...,x_2) = 2  ; x_i in [0,..,2]
 1y(1,1) +2y(1,2)-x1 = 0
  y(1,0) + y(1,1) + y(1,2) = 1
 1y(2,1) +2y(2,2)-x2 = 0
  y(2,0) + y(2,1) + y(2,2) = 1
  y(1,2) + y(2,2) >= 1
y(1,0) >= 0
y(1,0) <= 1
y(1,1) >= 0
y(1,1) <= 1
y(1,2) >= 0
y(1,2) <= 1
y(2,0) >= 0
y(2,0) <= 1
y(2,1) >= 0
y(2,1) <= 1
y(2,2) >= 0
y(2,2) <= 1
#### After Projection
-1.00000 x1   -1.00000 x2   <= -2.00000 
+1.00000 x1                 <= 2.00000 
              +1.00000 x2   <= 2.00000 
#+END_COMMENT
