* The Projector (Fourier-Motzkin)
  :PROPERTIES:
  :ID:       68f91b13-7003-4091-b3b0-55315e9d516c
  :END:

** General structure
   :PROPERTIES:
   :ID:       b929f0e7-13d9-48df-bfe7-6d3a5233927a
   :END:
The parameters are ~c~, the matrix of equalities and inequalities,
~ne~ the number of equalities (which are all at the beginning) and
~nv~ the number of variables onto which to project (and they are at
positions 1 to ~nv~ since column 0 has the constant side.)

First, use all ~ne~ equalities to eliminate ~ne~ variables (starting
from the right).  Decide which variable to eliminate next. (In time we
can think to optimize the choice.) 

Sort the matrix on the coefficient of that variable. For every pair of
one negative and one positive coefficient, generate the new
inequality. (This we will do in parallel, eventually.)

Then get rid of redundancy. (Eventually.)

Rinse and repeat until only ~nv~ variables are left. (Every
coefficient past ~nv~ is zero.)

There must be a final redundancy elimination, which must be
perfect. And also a reduction to "smallest" integer
coefficient. (Maybe take out the gcd from every row).


*** TODO Reduce equations

Perform row reduction on the submatrix of equalities.
(probably best not to reinvent the wheel here; look into BLAS
maybe this?: https://github.com/tpapp/lla)


*** DONE Normalize

Consider $x_i$ to be the variable currently being eliminated.
Divide every inequality where the coefficient of $x_i$ is nonzero by that coefficient.
The end result of this step should leave every inequality such that the new coefficient
on $x_i$ is one of three options: 1, -1, or zero.

(This process can definitely be its own function but its efficiency may need to be
considered.)

#+BEGIN_SRC lisp
(defun divide-row (row divisor)
    (loop for i from 0 below (length row)
             do (setf (aref row i) (/ (aref row i) divisor)))) ; ditch this double aref!

(defun normalize-row (row pos)
    (let ((a (abs (aref row pos))))
     (if (not (eql a 0.0))
         (divide-row row a)))) 

(defun normalize (C pos)
    (map 'list (lambda (x) (normalize-row x pos)) C))


#+END_SRC

#+RESULTS:
: NORMALIZE

*** TODO Partition and Compare

**** DONE Partition

Ignore henceforth inequalities containing a coefficient of zero on $x_i$.
Construct two sets, ~Pos~ and ~Neg~, such that every inequality belongs to one or the
other depending on the sign of the coefficient on $x_i$. The parameter ~xi~ is the
address of the coefficient on $x_i$ in ~C~ and probably needs to be renamed for
better readability.

#+BEGIN_SRC lisp
(defun partition (C xi)
    (loop for row in C
      if (< (aref row xi) 0.0)
      collect row into neg          ; kind of a nasty hack, there
      else if (> (aref row xi) 0.0) ; is probably a better way to
      collect row into pos          ; go about the partitioning
      finally (return (values pos neg))))

#+END_SRC

#+RESULTS:
: PARTITION

**** DONE Compare

For every pair of inequalities $p_i$ and $n_i$, where $p_i \in$ ~Pos~ and $n_i \in$
~Neg~, take the sum (row addition in the matrix). Append the resulting inequality to
the matrix.

#+BEGIN_SRC lisp
(defun compare (C xi)
    (multiple-value-bind (pos neg) (partition C xi)
      (let ((res '()))
      (progn
        (loop for p in pos do ; there MUST be a better way...
          (loop for n in neg do
          (cons (map 'vector + p n) res)))
        res))))

#+END_SRC

#+RESULTS:
: COMPARE

**** DONE Removal

Delete every row from the matrix who belonged to ~Pos~ or ~Neg~.
The only rows not used at this point (and thus, the rows that must remain) are those
that had a coefficient of zero on $x_i$ to begin with. So, the new matrix will be the
union of the following: rows from the original with the mentioned zero coefficient, 
and the result of ~compare~.

At the end of each comparison and removal, the matrix present represents a set of 
equalities and inequalities with $x_i$ eliminated.

#+BEGIN_SRC lisp
(defun removal (C xi)
    (if C
        (if (eql 0.0 (aref (car C) xi))
            (cons (car C) (removal (cdr C) xi)) ; keep it, continue to the rest
            (removal (cdr C) xi)) ; toss it, continue to the rest
        nil))
#+END_SRC

#+RESULTS:
: REMOVAL

And finally, the whole elimination step for one variable:
(thought: how can we best keep track of number of equations in C? discuss monday)

#+BEGIN_SRC lisp
(defun eliminate (C xi)  ; order is clearly important here
    (append (compare C xi) (removal C xi)))
#+END_SRC

#+RESULTS:
: ELIMINATE

*** Experiment
#+BEGIN_SRC lisp
(defun vars-to-elim (C nv) ; returns a sequence of the positions of variables 
                           ; to be eliminated, currently right to left
        (reverse (number-sequence (+ nv 1) (- (length (car C)) 1))))

#+END_SRC

#+RESULTS:
: VARS-TO-ELIM

#+BEGIN_SRC lisp
(defun project_v1 (C ne nv i)
    (if (< (+ nv 1) i) ; if we're into the variables we're supposed to keep, stop
        C
        (project_v1 (eliminate C i) ne nv (- i 1)))) ; elim a var, decrement i, keep going

(defun project_v1_top (C ne nv)
    (project_v1 C ne nv (- (length (car C)) 1)))
#+END_SRC

#+RESULTS:
: PROJECT_V1_TOP

#+BEGIN_SRC lisp
(defun redundancy-trim (C)
    (remove-duplicates C :test #'equalp))

#+END_SRC

#+RESULTS:
: REDUNDANCY-TRIM

#+BEGIN_SRC lisp
(defun divide-by-gcd (row)
    (let ((d (gcd (apply #'values (loop for x across row collect x)))))
         (divide-row row d)))
         

(defun coeff-reduction (C)
    (if C
        (cons (divide-by-gcd (car C)) (coeff-reduction (cdr C)))
        C))

#+END_SRC

#+RESULTS:
: COEFF-REDUCTION



** Project

#+BEGIN_SRC lisp
(defun project (C ne nv)
    (redundancy-trim (coeff-reduction (project_v1_top C ne nv))))
#+END_SRC

#+RESULTS:
: PROJECT


#+BEGIN_SRC lisp :session :results output
  (let ((param '(1 2 2 2))
        (generator #'gen-at-least))
    (multiple-value-bind (C ne nv) (apply generator param)
      (project C ne nv) 0 nv))
#+END_SRC

#+RESULTS:
: 4 2
: (#(0 -1 0 0 1 2 0 0 0) #(1 0 0 1 1 1 0 0 0) #(0 0 -1 0 0 0 0 1 2)
:  #(1 0 0 0 0 0 1 1 1) #(1 0 0 0 0 1 0 0 1) #(0 0 0 1 0 0 0 0 0)
:  #(-1 0 0 -1 0 0 0 0 0) #(0 0 0 0 1 0 0 0 0) #(-1 0 0 0 -1 0 0 0 0)
:  #(0 0 0 0 0 1 0 0 0) #(-1 0 0 0 0 -1 0 0 0) #(0 0 0 0 0 0 1 0 0)
:  #(-1 0 0 0 0 0 -1 0 0) #(0 0 0 0 0 0 0 1 0) #(-1 0 0 0 0 0 0 -1 0)
:  #(0 0 0 0 0 0 0 0 1) #(-1 0 0 0 0 0 0 0 -1))
#+END_SRC


#+BEGIN_COMMENT
#### at_least_1(x_1,...,x_2) = 2  ; x_i in [0,..,2]
 1y(1,1) +2y(1,2)-x1 = 0
  y(1,0) + y(1,1) + y(1,2) = 1
 1y(2,1) +2y(2,2)-x2 = 0
  y(2,0) + y(2,1) + y(2,2) = 1
  y(1,2) + y(2,2) >= 1
y(1,0) >= 0
y(1,0) <= 1
y(1,1) >= 0
y(1,1) <= 1
y(1,2) >= 0
y(1,2) <= 1
y(2,0) >= 0
y(2,0) <= 1
y(2,1) >= 0
y(2,1) <= 1
y(2,2) >= 0
y(2,2) <= 1
#### After Projection
-1.00000 x1   -1.00000 x2   <= -2.00000 
+1.00000 x1                 <= 2.00000 
              +1.00000 x2   <= 2.00000 
#+END_COMMENT
