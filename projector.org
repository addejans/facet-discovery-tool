* The Projector (Fourier-Motzkin)
  :PROPERTIES:
  :ID:       68f91b13-7003-4091-b3b0-55315e9d516c
  :END:

** Preamble
   :PROPERTIES:
   :ID:       2456ed95-e292-4dcd-9c55-8104f2047047
   :END:
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
(in-package #:facet-discovery-tool)
#+END_SRC

* General structure
   :PROPERTIES:
   :ID:       b929f0e7-13d9-48df-bfe7-6d3a5233927a
   :END:
The parameters are ~c~, the matrix of equalities and inequalities;
~ne~, the number of equalities (which are all at the top of the list);
and ~nv~, the number of variables onto which to project (and they are
at positions 1 to ~nv~ since column 0 has the constant side.)

First, use all ~ne~ equalities to eliminate ~ne~ variables (starting
from the right).  Decide which variable to eliminate next. (In time we
can think to optimize the choice.)

Sort the matrix on the coefficient of that variable. For every pair of
one negative and one positive coefficient, generate the new
inequality. (This we will do in parallel, eventually.)

Then get rid of redundancy.

Rinse and repeat until only ~nv~ variables are left. (Every
coefficient past ~nv~ is zero.)

There must be a final redundancy elimination, which must be
perfect. And also a reduction to "smallest" integer
coefficient. (Maybe take out the gcd from every row).


*** DONE Reduce equations

Eliminate variables from the system using the ~ne~ equations.

This function assumes the user is not an idiot. If the system is not
feasible this will fail. We will need to improve on this later.

It will find, given a row and the number of variables we wish to
project onto, the first non-zero position in the data part of the
inequalities.
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
  (defun first-non-zero (row nv)
    "First non-zero position past nv."
      (do ((i (1+ nv) (1+ i)))
        ((not (zerop (inequality-ref row i))) i)))
#+END_SRC

#+RESULTS:
: FIRST-NON-ZERO

#+BEGIN_SRC lisp :package facet-discovery-tool
(equalp 7 (first-non-zero (cons #(1 0 0 0 0 0 0 2 0 2 4) nil) 6))
#+END_SRC

#+RESULTS:
: T


A row operation that zeros out the destination at pos from the source at pos.  
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
  (defun zero-out (dest source pos)
    "In-place, update the destination if coefficient at pos is non-zero."
    (when (not (zerop (inequality-ref dest pos)))
      (let* ((a (inequality-ref source pos))
             (b (inequality-ref dest pos))
             (c (/ (- b) a)))
        (kaplusb c source dest))))
#+END_SRC

#+RESULTS:
: ZERO-OUT

#+BEGIN_SRC lisp :package facet-discovery-tool
(equalp (cons #(11 1 4 0) nil) (zero-out (cons #(6 0 2 1) nil) 
                                         (cons #(5 1 2 -1) nil) 3)) 
#+END_SRC

#+RESULTS:
: T

A blas-type operator: k times 'row a' add to 'row b'.  
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
  (defun kaplusb (k a b)
    (dotimes (i (inequality-length a) b)
      (incf (inequality-ref b i) (* k (inequality-ref a i)))))
#+END_SRC

#+RESULTS:
: KAPLUSB

#+BEGIN_SRC lisp :package facet-discovery-tool
(equalp (cons #(2 4 7) nil) (let ((dest (cons #(0 0 1) nil))) 
                                 (kaplusb 2 (cons #(1 2 3) nil) dest) dest)) 
#+END_SRC

#+RESULTS:
: T

Consider the first ~ne~ rows.  For each one, find the first non-zero
coefficient in the 'additional' variables (not among the variables
that we need to project on). It is assumed that there is such a
non-zero coefficient. (What should we do if not?) Isolate that
variable and substitute its expression into all subsequent rows.

For instance given a row $1 = x_1 + y_1 + y2$, we isolate $y1 =
1-x_1-y_2$ and substitute that into all other equations and
inequalities.
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
  (defun eliminate-equations (C ne nv)
    (do ((i 0 (1+ i))
         (row (car C) (car (cdr C)))
         (C C (cdr C)))
        ((= i ne) C)
      (let ((pos (first-non-zero row nv)))
        (normalize-row row pos)
        (dolist (other-row (cdr C))
          (zero-out other-row row pos)))))
#+END_SRC

#+RESULTS:
: ELIMINATE-EQUATIONS

#+BEGIN_SRC lisp :package facet-discovery-tool
(equalp (list (cons #(0 4 2 0 5) nil)) (let ((C (list (cons #(0 1 0 -1 0) nil)
                                               (cons #(0 1 2 3 5) nil))))
                                        (eliminate-equations C 1 2)))
#+END_SRC

#+RESULTS:
: T

#+BEGIN_SRC lisp :results output :package facet-discovery-tool
  (let ((param '(1 2 2 2))
        (generator #'gen-at-least))
    (multiple-value-bind (C ne nv) (apply generator param)
      (output-matrix C ne nv)
      (format t "~&NEW~&")
      (output-matrix (eliminate-equations C ne nv) 0 nv)))
#+END_SRC

#+RESULTS:
#+begin_example
   0  =  -1x( 1)                    +1y( 4)  +2y( 5)                           
   1  =                    +1y( 3)  +1y( 4)  +1y( 5)                           
   0  =           -1x( 2)                                      +1y( 7)  +2y( 8)
   1  =                                               +1y( 6)  +1y( 7)  +1y( 8)
   1 <=                                      +1y( 5)                    +1y( 8)
   0 <=                    +1y( 3)                                             
  -1 <=                    -1y( 3)                                             
   0 <=                             +1y( 4)                                    
  -1 <=                             -1y( 4)                                    
   0 <=                                      +1y( 5)                           
  -1 <=                                      -1y( 5)                           
   0 <=                                               +1y( 6)                  
  -1 <=                                               -1y( 6)                  
   0 <=                                                        +1y( 7)         
  -1 <=                                                        -1y( 7)         
   0 <=                                                                 +1y( 8)
  -1 <=                                                                 -1y( 8)
NEW
   1 <=                                      +1y( 5)                    +1y( 8)
  -1 <=  -1x( 1)                             +1y( 5)                           
   0 <=  +1x( 1)                             -1y( 5)                           
   0 <=  +1x( 1)                             -2y( 5)                           
  -1 <=  -1x( 1)                             +2y( 5)                           
   0 <=                                      +1y( 5)                           
  -1 <=                                      -1y( 5)                           
  -1 <=           -1x( 2)                                               +1y( 8)
   0 <=           +1x( 2)                                               -1y( 8)
   0 <=           +1x( 2)                                               -2y( 8)
  -1 <=           -1x( 2)                                               +2y( 8)
   0 <=                                                                 +1y( 8)
  -1 <=                                                                 -1y( 8)
#+end_example

#+COMMENT
|  0 | -1 |  0 |  0 |  1 |  2 |  0 |  0 |  0 |
|  1 |  0 |  0 |  1 |  1 |  1 |  0 |  0 |  0 |
|  0 |  0 | -1 |  0 |  0 |  0 |  0 |  1 |  2 |
|  1 |  0 |  0 |  0 |  0 |  0 |  1 |  1 |  1 |
|  1 |  0 |  0 |  0 |  0 |  1 |  0 |  0 |  1 |
|  0 |  0 |  0 |  1 |  0 |  0 |  0 |  0 |  0 |
| -1 |  0 |  0 | -1 |  0 |  0 |  0 |  0 |  0 |
|  0 |  0 |  0 |  0 |  1 |  0 |  0 |  0 |  0 |
| -1 |  0 |  0 |  0 | -1 |  0 |  0 |  0 |  0 |
|  0 |  0 |  0 |  0 |  0 |  1 |  0 |  0 |  0 |
| -1 |  0 |  0 |  0 |  0 | -1 |  0 |  0 |  0 |
|  0 |  0 |  0 |  0 |  0 |  0 |  1 |  0 |  0 |
| -1 |  0 |  0 |  0 |  0 |  0 | -1 |  0 |  0 |
|  0 |  0 |  0 |  0 |  0 |  0 |  0 |  1 |  0 |
| -1 |  0 |  0 |  0 |  0 |  0 |  0 | -1 |  0 |
|  0 |  0 |  0 |  0 |  0 |  0 |  0 |  0 |  1 |
| -1 |  0 |  0 |  0 |  0 |  0 |  0 |  0 | -1 |



*** DONE Normalize

Consider $x_i$ to be the variable currently being eliminated.  Divide
every inequality where the coefficient of $x_i$ is nonzero by that
coefficient.  The end result of this step should leave every
inequality such that the new coefficient on $x_i$ is one of three
options: 1, -1, or zero.

(This process can definitely be its own function but its efficiency
may need to be considered.)

Divide-row divides a row in the matrix by another
number. Normalize-row divides a row by the coefficient at pos,
assuming that coefficient is nonzero. Normalize applies the row
normalization at a position to every row in the matrix, preparing for
elimination.
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
(defun divide-row (row divisor)
    (loop for i from 0 below (inequality-length row)
             do (setf (inequality-ref row i) 
                      (/ (inequality-ref row i) divisor))))

(defun normalize-row (row pos)
    (let ((a (abs (inequality-ref row pos))))
     (when (not (zerop a))
         (divide-row row a)))
row) 

(defun normalize (C pos)
    (map 'list (lambda (x) (normalize-row x pos)) C))


#+END_SRC

#+RESULTS:
: NORMALIZE

#+BEGIN_SRC lisp :package facet-discovery-tool
(equalp (let ((C (list (cons #(0 1 5 2) nil) (cons #(0 1 -4 3) nil))))
             (normalize  C 2))
(list (cons #(0 1/5 1 2/5) nil) (cons #(0 1/4 -1 3/4) nil)))
#+END_SRC

#+RESULTS:
: T

*** DONE Partition and Compare

**** DONE Partition

Construct three sets, ~Naught~, ~Pos~, and ~Neg~; such that every
inequality belongs to one of them depending on the sign of the
coefficient on $x_i$. The parameter ~xi~ is the address of the
coefficient on $x_i$ in ~C~.

This function takes the matrix and, after normalizing on ~xi~,
partitions the inequalities into the three sets.
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
  (defun partition (C xi)
    (normalize C xi)
    (let ((pos)
          (neg)
          (naught))
      (dolist (row C (values (redundancy-trim pos)
                             (redundancy-trim neg) 
                             (redundancy-trim naught)))
        (cond ((minusp (inequality-ref row xi)) (push row neg))
              ((plusp (inequality-ref row xi)) (push row pos))
              (t (push row naught))))))
#+END_SRC

#+RESULTS:
: PARTITION

#+BEGIN_SRC lisp :package facet-discovery-tool
(equalp (partition (list (cons #(1 2 3 4) nil) (cons #(1 2 -3 4) nil) (cons #(1 2 0 4) nil)) 2)
(values (list (cons #(1/3 2/3 1 4/3) nil)) (list (cons #(1/3 2/3 -1 4/3)  nil) )
                                    (list (cons #(1 2 0 4)  nil))))

#+END_SRC

#+RESULTS:
: T

#+BEGIN_SRC lisp :package facet-discovery-tool
(equalp (partition (list '(#(1 2 3 4) . nil) '(#(2 4 6 8) . nil) '(#(1 2 -3 4) . nil)
                         '(#(1 2 0 4) . nil) '(#(2 4 0 8) . nil) ) 
                   2)
	           (values (list (cons #(1/3 2/3 1 4/3) nil ))
                   (list (cons #(1/3 2/3 -1 4/3) nil))
                   (list (cons #(1 2 0 4) nil))))

#+END_SRC

#+RESULTS:
: T


**** DONE Zeroing out the variable being eliminated

For every pair of inequalities $p_i$ and $n_i$, where $p_i \in$ ~Pos~
and $n_i \in$ ~Neg~, take the sum (row addition in the matrix). Append
the resulting inequality to the new matrix.

I am thinking that we could do the redundency elimination separately
on the sets pos neg and naught.  Because there is no way an inequality
in one set is a multiple of one in another set.
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
  (defun eliminate (C xi)
      (multiple-value-bind (pos neg naught) (partition C xi)
        (dolist (p pos naught)
          (dolist (n neg)
            (push (add-inequalities p n) naught)))))
#+END_SRC

#+RESULTS:
: ELIMINATE

#+BEGIN_SRC lisp :results output :package facet-discovery-tool
  (let (( C (list '(#(0 1 5 2) . nil) '(#(0 1 0 5) . nil) '(#(0 1 -4 -1) . nil) ) ))
    (multiple-value-bind (P N Z) (partition C 2)
      (format t "~&+:~a~&-:~a~&z:~a" P N Z)
      ))
#+END_SRC

#+RESULTS:
: +:((#(0 1/5 1 2/5)))
: -:((#(0 1/4 -1 -1/4)))
: z:((#(0 1 0 5)))

#+BEGIN_SRC lisp :results output :package facet-discovery-tool
  (let ((C (list '(#(0 1 -5 2) . #*10000) '(#(6 1 1 5) . #*01000) 
                 '(#(0 1 0 5) . #*00100) '(#(0 1 -4 -1) . #*00010) 
                 '(#(1 1 2 3) . #*00001))))
      (format t "~&~a" (eliminate C 2))
      )
#+END_SRC

#+RESULTS:
: ((#(6 6/5 0 27/5) . #*11000) (#(6 5/4 0 19/4) . #*01010)
:  (#(1/2 7/10 0 19/10) . #*10001) (#(1/2 3/4 0 5/4) . #*00011)
:  (#(0 1 0 5) . #*00100))

This will eliminate all variables past ~nv~.
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
  (defun eliminate-all (C nv &optional (i (1- (inequality-length (car C)))))
    (if (= i nv)
        C
        (eliminate-all (row-history-check2 (eliminate C i)) nv (1- i))))
#+END_SRC

#+RESULTS:
: ELIMINATE-ALL

#+BEGIN_SRC lisp :package facet-discovery-tool
 (equalp (let ((C (list '(#(0 1 5 4 2) . #*10) '(#(0 1 -4 -3 -3) . #*01) ) ))
    (eliminate C 4))
    '(( #(0 5/6 7/6 1 0) . #*11)))
#+END_SRC

#+RESULTS:
: T

*** Redundancy Handling

The trivial inequalties of the form $\alpha \geq 0$ will always be
collected in the set ~naught~, and so can simply be trimmed at the end
of the eliminations.

The nontrivial inequalities can be handled separately in ~pos~ ~neg~
and ~naught~, as no inequality can have multiples in another set. So
we just need to call ~redundancy-trim~ every time we construct the
triple of sets.

Inequalities that are loose bounds, however, must be checked for after
the new matrix has been constructed.

#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
(defun redundancy-trim (C)
    (remove-duplicates C :test #'row-multiple-p))

#+END_SRC

#+RESULTS:
: REDUNDANCY-TRIM

Finds the gcd of the coefficients of an inequality.
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
(defun gcd-row (row) ; thank Euclid for the GCD being associative
    (let ((rowlist (loop for x across (inequality-data row) collect x)))
         (reduce (lambda (x y) (gcd x y)) rowlist)))

#+END_SRC

#+RESULTS:
: GCD-ROW

#+BEGIN_SRC lisp :package facet-discovery-tool
(equalp (gcd-row '(#(2 4 10 6) . #*01)) 2)

#+END_SRC

#+RESULTS:
: T

Takes the gcd of a row and divides the row by it. Coeff-reduction will
be used on the final matrix to simplify the representation a bit.
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
(defun divide-by-gcd (row)
         (progn (divide-row row (gcd-row row)) ; row your boat
                row))

(defun coeff-reduction (C)
    (if C
        (cons (divide-by-gcd (car C)) (coeff-reduction (cdr C)))
        C))

#+END_SRC

#+RESULTS:
: COEFF-REDUCTION

#+BEGIN_SRC lisp :package facet-discovery-tool
(equalp (coeff-reduction '( (#(1 2 3 4) . #*100) (#(2 4 6 8) . #*010) (#(3 6 9 12) . #*001)))
'((#(1 2 3 4) . #*100) (#(1 2 3 4) . #*010) (#(1 2 3 4) . #*001)))

#+END_SRC

#+RESULTS:
: T

#+BEGIN_SRC lisp :package facet-discovery-tool
(equalp '(#(1 3 2 10) . #*01) (let ((row (divide-by-gcd '(#(3 9 6 30) . #*01)))) row))

#+END_SRC

#+RESULTS:
: T

This determines whether a row is trivial (of the form $\alpha \geq 0$).
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
(defun trivial-row-p (row)
  (reduce (lambda (x y) (and x y)) (map 'vector #'zerop (inequality-data row)) :start 1))

#+END_SRC

#+RESULTS:
: TRIVIAL-ROW-P

#+BEGIN_SRC lisp :package facet-discovery-tool
(and (trivial-row-p '(#(-1 0 0 0 0) . #*01))
 (trivial-row-p '(#(-2 0 0 0 0) . #*10)))

#+END_SRC

#+RESULTS:
: T

This removes all trivial inequalities from the matrix.
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
(defun redun-trivial (C)
  (cond ((null C) nil)
        ((trivial-row-p (car C)) (redun-trivial (cdr C)))
        (T (cons (car C) (redun-trivial (cdr C))))))

#+END_SRC

#+RESULTS:
: REDUN-TRIVIAL

#+BEGIN_SRC lisp :package facet-discovery-tool
(equalp (redun-trivial '((#(0 1 2 3 4) . #*1000) (#(-1 0 0 0 0) . #*0100) 
                         (#(0 0 0 0 0) . #*0010) (#(1 1 1 1 1) . #*0001)))
    '((#(0 1 2 3 4) . #*1000) (#(1 1 1 1 1) . #*0001)))

#+END_SRC

#+RESULTS:
: T


For now, we are doing this just to check.  The logic should be that we
do this after every variable elimination and we do not go past the
last column eliminated.
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
  (defun row-multiple-p (row1 row2)
    "True iff one is a multiple of the other."
    (let ((ratio))
      (do*  ((i 0 (1+ i))
             (a (inequality-ref row1 i) (inequality-ref row1 i))
             (b (inequality-ref row2 i) (inequality-ref row2 i)))
            ((= (1- (inequality-length row1)) i)
             (or (and (zerop a) (zerop b)) (and (not (zerop b)) (= ratio (/ a b)))))
        (cond ((and (zerop a) (not (zerop b))) (return nil))
              ((and (zerop b) (not (zerop a))) (return nil))
              ((and (zerop a) (zerop b)))
              ((null ratio) (setq ratio (/ a b)))
              ((not (= ratio (/ a b))) (return nil))))))
#+END_SRC

#+RESULTS:
: ROW-MULTIPLE-P

#+BEGIN_SRC lisp :package facet-discovery-tool
(row-multiple-p '(#(1 0 4 0) . #*01) '(#(2 0 8 0) . #*10))
#+END_SRC

#+RESULTS:
: T

#+BEGIN_SRC lisp :package facet-discovery-tool
(row-multiple-p '(#(1 0 3 4) . #*10) '(#(2 4 6 8) . #*01))

#+END_SRC

#+RESULTS:
: NIL

Returns true if there is at least one row in C which has a multiple in
C.
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
(defun has-multiple-p (C)
  (if (and C (cdr C))
      (let ((row1 (car C)))
        (reduce (lambda (x y) (or x y)) 
          (mapcar (lambda (r) (row-multiple-p r row1)) (cdr C))))
      nil))

#+END_SRC

#+RESULTS:
: HAS-MULTIPLE-P

#+BEGIN_SRC lisp :package facet-discovery-tool
(has-multiple-p '((#(1 2 3 4) . #*100) (#(1 1 1 1) . #*010) (#(2 4 6 8) . #*001)))

#+END_SRC

#+RESULTS:
: T



Removes the redundant inequalities that are multiples of other
inequalities.
#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
  (defun redun-multiple (C)
    (if (has-multiple-p C)
        (redun-multiple (cdr C))
        (cons (car C) (redun-multiple (cdr C)))))
#+END_SRC

#+RESULTS:
: REDUN-MULTIPLE

#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
(defun row-history-check (C)
  (dolist (row1 C)
    (dolist (row2 C)
      (let ((row1-hist (inequality-history row1))
	    (row2-hist (inequality-history row2)))
	(cond ((finite-set-included-p row1-hist row2-hist) (remove row2 C))
	      ((finite-set-included-p row2-hist row1-hist) (remove row1 C))
	      (T))))))
#+END_SRC

#+RESULTS:
: ROW-HISTORY-CHECK

#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
(defun row-history-check2 (C)
  (loop for row1 in C do
       (loop for row2 in C do
	    (let ((row1-hist (inequality-history row1))
		  (row2-hist (inequality-history row2)))
	      (cond ((finite-set-included-p row1-hist row2-hist) (delete row2 C))
		    ((finite-set-included-p row2-hist row1-hist) (delete row1 C))
		    (T))))
       return C))
#+END_SRC

#+RESULTS:
: ROW-HISTORY-CHECK2

#+BEGIN_SRC lisp :package facet-discovery-tool
(let ((mat '(((1 2 3 4) . #*0001)
	     ((5 6 7 8) . #*0011)
	     ((2 4 6 8) . #*1001)
	     ((1 1 1 1) . #*1000))))
  (row-history-check2 mat))

#+END_SRC

#+RESULTS:
: (((1 2 3 4) . #*0001) ((1 1 1 1) . #*1000))

#+BEGIN_SRC lisp :package facet-discovery-tool
(equalp (row-history-check2 '(((1 2 3 4) . #*0001)
                              ((5 6 7 8) . #*0011)
                              ((2 4 6 8) . #*1001)
                              ((1 1 1 1) . #*1000)))
	'(((1 2 3 4) . #*0001) 
	  ((1 1 1 1) . #*1000)))

#+END_SRC

#+RESULTS:
: T




** Project


#+BEGIN_SRC lisp :tangle "projector.lisp" :package facet-discovery-tool
(defun project (C ne nv)
    (let ((Cprime (eliminate-equations C ne nv)))
         (redundancy-trim (coeff-reduction (eliminate-all Cprime nv)))))
#+END_SRC

#+RESULTS:
: PROJECT

#+BEGIN_SRC lisp  :package facet-discovery-tool
(defun project-test (C ne nv)
  (let ((Cprime (eliminate-equations C ne nv)))
    (output-matrix (redun-trivial
		    (eliminate-all Cprime nv))
		   0 nv)))
#+END_SRC

#+RESULTS:
: PROJECT-TEST


#+BEGIN_SRC lisp :session :results output :package facet-discovery-tool
  (let ((param '(1 2 2 2))
        (generator #'gen-at-least))
    (multiple-value-bind (C ne nv) (apply generator param)
      (project-test C ne nv)))
#+END_SRC

#+RESULTS:
#+begin_example
   0 <=           +1x( 2)                                                      
   1 <=1/2x( 1)  +1x( 2)                                                      
   1 <=  +1x( 1)  +1x( 2)                                                      
   1 <=1/2x( 1)1/2x( 2)                                                      
   1 <=  +1x( 1)1/2x( 2)                                                      
   0 <=1/2x( 1)                                                               
-3/2 <=-1/2x( 1)                                                               
-1/2 <=1/2x( 1)                                                               
  -2 <=  -1x( 1)                                                               
-3/2 <=         -1/2x( 2)                                                      
-1/2 <=         1/2x( 2)                                                      
  -1 <=         -1/2x( 2)                                                      
#+end_example




Here is the current output of the above test block, with the
historical sets as well. Notice that none of the sets are contained
within another... so the subroutine to check for subsets will always
fail.
#+begin_comment
((#(   0    0    1 0 0 0 0 0 0) . #*1000001010000)
 (#(   1  1/2    1 0 0 0 0 0 0) . #*1001000010000)
 (#(   1    1    1 0 0 0 0 0 0) . #*1010000010000)
 (#(   1  1/2  1/2 0 0 0 0 0 0) . #*1001000001000)
 (#(   1    1  1/2 0 0 0 0 0 0) . #*1010000001000)
 (#(   0  1/2    0 0 0 0 0 0 0) . #*1001000000001)
 (#(-3/2 -1/2    0 0 0 0 0 0 0) . #*0000101000000)
 (#(-1/2  1/2    0 0 0 0 0 0 0) . #*0010100000000)
 (#(  -2   -1    0 0 0 0 0 0 0) . #*0100001000000)
 (#(-3/2    0 -1/2 0 0 0 0 0 0) . #*0000000000101)
 (#(-1/2    0  1/2 0 0 0 0 0 0) . #*0000000010100)
 (#(  -1    0 -1/2 0 0 0 0 0 0) . #*0000000101000))
#+end_comment







#+begin_example
   0 <=         1/2x( 2)                                                      
   1 <=1/2x( 1)1/2x( 2)                                                      
   1 <=  +1x( 1)1/2x( 2)                                                      
   0 <=1/2x( 1)                                                               
   0 <=  +1x( 1)                                                               
-3/2 <=-1/2x( 1)                                                               
-1/2 <=1/2x( 1)                                                               
  -2 <=  -1x( 1)                                                               
  -1 <=-1/2x( 1)                                                               
-3/2 <=         -1/2x( 2)                                                      
#+end_example





#+COMMENT:
#+begin_example
  -1 <=                                                                        
   0 <=1/2x( 1)                                                               
   0 <=  +1x( 1)                                                               
-3/2 <=-1/2x( 1)                                                               
-1/2 <=                                                                        
-1/2 <=1/2x( 1)                                                               
  -2 <=  -1x( 1)                                                               
  -1 <=-1/2x( 1)                                                               
  -1 <=                                                                        
   0 <=           +1x( 2)                                                      
   1 <=1/2x( 1)  +1x( 2)                                                      
   1 <=  +1x( 1)  +1x( 2)                                                      
   0 <=         1/2x( 2)                                                      
   1 <=1/2x( 1)1/2x( 2)                                                      
   1 <=  +1x( 1)1/2x( 2)                                                      
  -1 <=                                                                        
   0 <=1/2x( 1)                                                               
   0 <=  +1x( 1)                                                               
  -1 <=                                                                        
   0 <=         1/2x( 2)                                                      
   0 <=           +1x( 2)                                                      
-3/2 <=         -1/2x( 2)                                                      
-1/2 <=                                                                        
-1/2 <=         1/2x( 2)                                                      
  -2 <=           -1x( 2)                                                      
  -1 <=         -1/2x( 2)                                                      
  -1 <=                                                                        
#+end_example


|    0 |  1/2 |    0 | 0 | 0 | 0 | 0 | 0 | 0 |
|    0 |    1 |    0 | 0 | 0 | 0 | 0 | 0 | 0 |
| -3/2 | -1/2 |    0 | 0 | 0 | 0 | 0 | 0 | 0 |
| -1/2 |  1/2 |    0 | 0 | 0 | 0 | 0 | 0 | 0 |
|   -2 |   -1 |    0 | 0 | 0 | 0 | 0 | 0 | 0 |
|   -1 | -1/2 |    0 | 0 | 0 | 0 | 0 | 0 | 0 |
|    0 |  1/2 |    0 | 0 | 0 | 0 | 0 | 0 | 0 |
|    0 |    1 |    0 | 0 | 0 | 0 | 0 | 0 | 0 |


|    0 |    0 |  1/2 | 0 | 0 | 0 | 0 | 0 | 0 |
|    1 |  1/2 |  1/2 | 0 | 0 | 0 | 0 | 0 | 0 |
|    1 |    1 |  1/2 | 0 | 0 | 0 | 0 | 0 | 0 |


|    0 |    0 |  1/2 | 0 | 0 | 0 | 0 | 0 | 0 |
| -3/2 |    0 | -1/2 | 0 | 0 | 0 | 0 | 0 | 0 |
| -1/2 |    0 |    0 | 0 | 0 | 0 | 0 | 0 | 0 |


-1 <= 0
0 <= 1/2 x1
0 <= x1
-3/2 <= -1/2 x1  ==> x1 <= 3
-1/2 <= 0
-1/2 <= 1/2 x1 ==> -1 <= x1
-2 <= x1
-1 <= -1/2 x1 ==> x1 <= 2  *******
-1 <= 0
0 <= 1/2 x2
1 <= 1/2 x1 + 1/2 x2  ==> 2 <= x1 + x2 ****
-1 <= 0
0 <= 1/2 x1
0 <= x1
-1 <= 0
0 <= 0
0 <= 1/2 x2
-3/2 <= -1/2 x2 ==> x2 <= 3
-1/2 <= 0

#+BEGIN_COMMENT
#### at_least_1(x_1,...,x_2) = 2  ; x_i in [0,..,2]
 1y(1,1) +2y(1,2)-x1 = 0
  y(1,0) + y(1,1) + y(1,2) = 1
 1y(2,1) +2y(2,2)-x2 = 0
  y(2,0) + y(2,1) + y(2,2) = 1
  y(1,2) + y(2,2) >= 1
y(1,0) >= 0
y(1,0) <= 1
y(1,1) >= 0
y(1,1) <= 1
y(1,2) >= 0
y(1,2) <= 1
y(2,0) >= 0
y(2,0) <= 1
y(2,1) >= 0
y(2,1) <= 1
y(2,2) >= 0
y(2,2) <= 1
#### After Projection
-1.00000 x1   -1.00000 x2   <= -2.00000 
+1.00000 x1                 <= 2.00000 
              +1.00000 x2   <= 2.00000 
#+END_COMMENT
