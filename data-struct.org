* Data structure used in the FM code

This is a merged and improved version of the matrix-handler and the
finite set utilities.

** Inequality
An inequality is a cons of the rationals making up the inequality and the historical set.
#+BEGIN_SRC lisp :tangle "data-structure.lisp" :package facet-discovery-tool
(defun make-inequality (n &optional (element nil))
  (cons (make-row n) (make-finite-set n element)))
#+END_SRC

*** Accessors
Access for the data part and the history part.
#+BEGIN_SRC lisp :tangle "data-structure.lisp" :package facet-discovery-tool
  (defun inequality-data (ine)
    (car ine))
  (defun inequality-history (ine)
    (cdr ine))
#+END_SRC
#+RESULTS:
: INEQUALITY-HISTORY

** Data type of the data part of an inequality
The augmented system is held in a list of simple-vectors of rationals
We may need to construct rows one at a time.
#+BEGIN_SRC lisp :tangle "data-structure.lisp" :package facet-discovery-tool
  (defun make-row (l)
    (make-array l :initial-element 0 :element-type 'rational))
#+END_SRC

#+RESULTS:
: MAKE-ROW

When we know of the full matrix at the start.
#+BEGIN_SRC lisp :tangle "data-structure.lisp" :package facet-discovery-tool
  (defun make-inequality-matrix (nbrows nbcols)
    (let ((M))
      (dotimes (i nbrows (nreverse M))
        (push (make-inequality nbcols i) M))))
#+END_SRC

#+RESULTS:
: MAKE-INEQUALITY-MATRIX

#+BEGIN_SRC lisp :package facet-discovery-tool
(make-inequality-matrix 3 4)
#+END_SRC

#+RESULTS:
: ((#(0 0 0 0) . #*1000) (#(0 0 0 0) . #*0100) (#(0 0 0 0) . #*0010))

Adding an inequality to a matrix of inequalities.
#+BEGIN_SRC lisp :tangle "data-structure.lisp" :package facet-discovery-tool
  (defun add-inequality (M ine)
    (push ine M))
#+END_SRC

#+RESULTS:
: ADD-INEQUALITY

#+BEGIN_SRC lisp :package facet-discovery-tool
(add-inequality (make-inequality-matrix 3 4) (make-inequality 4 3))
#+END_SRC

#+RESULTS:
: ((#(0 0 0 0) . #*0001) (#(0 0 0 0) . #*1000) (#(0 0 0 0) . #*0100)
:  (#(0 0 0 0) . #*0010))

Referencing an indexed element of the matrix. This is very likely not
useful in production code, but might be useful for displaying or
debugging purposes. In any case, it will be very slow.
#+BEGIN_SRC lisp :tangle "data-structure.lisp" :package facet-discovery-tool
  (defun matrix-ref (M i j)
    (svref (inequality-data (nth i M)) j))
#+END_SRC

#+RESULTS:
: MATRIX-REF

On the other hand, referencing an element of a row is fast and we
should abstract that away.
#+BEGIN_SRC lisp :tangle "data-structure.lisp" :package facet-discovery-tool
  (defmacro inequality-ref (ine i)
    `(svref (car ,ine) ,i))
  (defmacro row-ref (row i)
    `(svref ,row ,i))
#+END_SRC

#+RESULTS:
: ROW-REF

#+BEGIN_SRC lisp :results output :package facet-discovery-tool
  (let ((M (make-matrix 3 3))
        (value 0))
    (dolist (ine M)
      (dotimes (j (length (inequality-data ine)))
        (setf (inequality-ref ine j) (incf value))))
    (format t "~&~a @(1 1):~a" M (matrix-ref M 1 1)))
#+END_SRC

#+RESULTS:
: ((#(1 2 3) . #*100) (#(4 5 6) . #*010) (#(7 8 9) . #*001)) @(1 1):5

Adding two rows to get a (new) third one.
#+BEGIN_SRC lisp :tangle "data-structure.lisp" :package facet-discovery-tool
  (defun add-inequalities (ine-a ine-b)
    (let* ((row-a (inequality-data ine-a))
           (row-b (inequality-data ine-b))
           (his-a (inequality-history ine-a))
           (his-b (inequality-history ine-b))
           (n (length row-a))
           (ine-c (make-inequality n))
           (row-c (inequality-data ine-c)))
      (setf (cdr ine-c) (finite-set-union his-a his-b))
      (dotimes (i n ine-c)
        (setf (svref row-c i) (+ (svref row-a i) (svref row-b i))))))
#+END_SRC

#+RESULTS:
: ADD-INEQUALITIES

#+BEGIN_SRC lisp :results output :package facet-discovery-tool
  (let ((M (make-matrix 2 3))
        (value 0))
    (dolist (ine M)
      (let ((row (inequality-data ine)))
        (dotimes (j (length row))
          (setf (aref row j) (incf value)))))
    (format t "~&~a  ~a" (inequality-data (first M)) (inequality-history (first M)))
    (format t "~&~a  ~a" (inequality-data (second M)) (inequality-history (second M)) )
    (format t "~&========")
    (let ((s (add-inequalities (first M) (second M))))
      (format t "~&~a  ~a" (inequality-data s) (inequality-history s))))
#+END_SRC

#+RESULTS:
: #(1 2 3)  #*100
: #(4 5 6)  #*010
: ========
: #(5 7 9)  #*110

** Finite sets utilities

These are for use in the redundancy elimination.  We need to have a structure to handle sets of fixed maximal length (equal to the number of initial inequalities).  The required operations will be
- Set creation (maximal length)
- Set union (when a new inequality is created from two others)
- Test for set inclusion (this is the test of redundancy)

** Data structure
It seems to me that a bit-vector is appropriate. We will assume that
the elements are $0$ to $n-1$. We can initialize a set by setting it
to be a set of one element. This is useful for our application as, at
set creation each set represent one inequality.
#+BEGIN_SRC lisp :tangle "finite-set.lisp" :package facet-discovery-tool
  (defun make-finite-set (n &optional (element nil))
    (let ((s (make-array n :element-type 'bit)))
      (when element (setf (bit s element) 1))
      s))
#+END_SRC

#+RESULTS:
: MAKE-FINITE-SET

A small test
#+BEGIN_SRC lisp :package facet-discovery-tool
(equal #*000100000000  (make-finite-set 12 3))
#+END_SRC

#+RESULTS:
: T

** Size
Maybe we need this
#+BEGIN_SRC lisp :tangle "finite-set.lisp" :package facet-discovery-tool
  (defun finite-set-size (a)
    (length a))
#+END_SRC

#+RESULTS:
: FINITE-SET-SIZE

#+BEGIN_SRC lisp :package facet-discovery-tool
(finite-set-size (make-finite-set 12 4))
#+END_SRC

#+RESULTS:
: 12

** Set union
We need union of two sets creating a new set when we create a new
inequality from two old ones.
#+BEGIN_SRC lisp :tangle "finite-set.lisp" :package facet-discovery-tool
  (defun finite-set-union (a b)
    (let ((c (make-finite-set (length a))))
      (bit-ior a b c)))
#+END_SRC

#+RESULTS:
: FINITE-SET-UNION

#+BEGIN_SRC lisp :package facet-discovery-tool
(equal #*000100100000 (finite-set-union (make-finite-set 12 3) (make-finite-set 12 6)))
#+END_SRC

#+RESULTS:
: T

** Set inclusion predicate
To know if an inequality is redundant, we need to check if its set is
a superset of another one. So is a set is strictly included in
another, the inequality corresponding to the larger set is redundant.

#+BEGIN_SRC lisp :tangle "finite-set.lisp" :package facet-discovery-tool
  (defun finite-set-included-p (smaller larger)
    (equal (make-finite-set (length smaller)) (bit-andc2 smaller larger)))
#+END_SRC

#+RESULTS:
: FINITE-SET-INCLUDED-P

#+BEGIN_SRC lisp :package facet-discovery-tool
  (let* ((a (make-finite-set 12 3))
         (b (make-finite-set 12 5))
         (c (make-finite-set 12 7))
         (d (finite-set-union a b))
         (e (finite-set-union c (finite-set-union a b))))
    (finite-set-included-p d e))
#+END_SRC

#+RESULTS:
: T

*** Conversion
A utility to convert from our first version of the data structure,
with only the data part to the new structure where we add the history.

#+BEGIN_SRC lisp :tangle "finite-set.lisp" :package facet-discovery-tool
  (defun convert (C ne nv)
    (let ((newC nil)
          (m (length C)))
      (do ((row (car C) (car C))
           (C (cdr C) (cdr C))
           (i 0 (1+ i)))
          ((= i m) (nreverse newC))
        (if (< i ne)
            (push (cons row nil) newC)
            (push (cons row (make-finite-set (- m ne) (- i ne))) newC)))))
      
#+END_SRC

#+RESULTS:
: CONVERT

