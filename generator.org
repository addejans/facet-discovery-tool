* A generator of IP formulation

** Preamble
#+BEGIN_SRC lisp :tangle "generator.lisp"
(in-package #:facet-discovery-tool)
#+END_SRC

** An example
We want to generate Integer Programming formulations of the predicate 
: at_least_m(x_1, x_2, x_n) = k  x_i in [0,..,L]
which implies that at least ~m~ of the ~n~ variables must equal ~k~. 

For example ~at_least_2(x_1,x_2,x_3)=3~ with domain ~[0,..,4]~ should generate
#+BEGIN_SRC latex
  \begin{align*}
    0y_{1,0} + 1y_{1,1} + 2y_{1,2} + 3y_{1,3} + 4y_{1,4} - x_1 &= 0\\
    0y_{2,0} + 1y_{2,1} + 2y_{2,2} + 3y_{2,3} + 4y_{2,4} - x_2 &= 0\\
    0y_{3,0} + 1y_{3,1} + 2y_{3,2} + 3y_{3,3} + 4y_{3,4} - x_3 &= 0\\
    y_{1,0}+y_{1,1}+y_{1,2}+y_{1,3}+y_{1,4} &= 1\\
    y_{2,0}+y_{2,1}+y_{2,2}+y_{2,3}+y_{2,4} &= 1\\
    y_{3,0}+y_{3,1}+y_{3,2}+y_{3,3}+y_{3,4} &= 1\\
    y_{1,3} + y_{2,3} + y_{3,3} &= 2\\
    y_{i,j}&\ge 0\\
    y_{i,j}&\le 1
  \end{align*}
#+END_SRC
The first three equalities give values to the real variables.  The
next three ensure that each variable is assigned exactly one colour.
The next one fixes the correct number of variables to the required
colour.  The last set are the zero-one bounds for each additional
variable.

We will start with a simple-minded version that will printout the
formulation.
#+BEGIN_SRC lisp :tangle "generator.lisp"
  (defun output-at-least (m n k l)
    (format t "#### at_least_~d(x_1,...,x_~d) = ~d  ; x_i in [0,..,~d]~&" m n k l)
    (let ((I (loop :for i :from 1 :to n :collect i))
          (J (loop :for j :from 0 :to l :collect j)))
      (dolist (ii I)
        (dolist (jj J)
          (when (< 0 jj) (format t "~[ ~; ~:; +~]~dy(~d,~d)" jj jj ii jj)))
        (format t "-x~d = 0~&" ii)
        (dolist (jj J)
          (format t "~[ ~:;+~] y(~d,~d) " jj ii jj))
        (format t "= 1~&"))
      (dolist (ii I)
        (format t "~[ ~; ~:;+~] y(~d,~d) " ii ii k))
      (format t ">= ~d~&" m)
      (dolist (ii I)
        (dolist (jj J)
          (format t "y(~d,~d) >= 0~&" ii jj)
          (format t "y(~d,~d) <= 1~&" ii jj)))))

#+END_SRC

#+RESULTS:
: OUTPUT-AT-LEAST
*** One instance
#+BEGIN_SRC lisp :results output
(output-at-least 2 3 3 4)
#+END_SRC

#+RESULTS:
#+begin_example
#### at_least_2(x_1,...,x_3) = 3  ; x_i in [0,..,4]
 1y(1,1) +2y(1,2) +3y(1,3) +4y(1,4)-x1 = 0
  y(1,0) + y(1,1) + y(1,2) + y(1,3) + y(1,4) = 1
 1y(2,1) +2y(2,2) +3y(2,3) +4y(2,4)-x2 = 0
  y(2,0) + y(2,1) + y(2,2) + y(2,3) + y(2,4) = 1
 1y(3,1) +2y(3,2) +3y(3,3) +4y(3,4)-x3 = 0
  y(3,0) + y(3,1) + y(3,2) + y(3,3) + y(3,4) = 1
  y(1,3) + y(2,3) + y(3,3) >= 2
y(1,0) >= 0
y(1,0) <= 1
y(1,1) >= 0
y(1,1) <= 1
y(1,2) >= 0
y(1,2) <= 1
y(1,3) >= 0
y(1,3) <= 1
y(1,4) >= 0
y(1,4) <= 1
y(2,0) >= 0
y(2,0) <= 1
y(2,1) >= 0
y(2,1) <= 1
y(2,2) >= 0
y(2,2) <= 1
y(2,3) >= 0
y(2,3) <= 1
y(2,4) >= 0
y(2,4) <= 1
y(3,0) >= 0
y(3,0) <= 1
y(3,1) >= 0
y(3,1) <= 1
y(3,2) >= 0
y(3,2) <= 1
y(3,3) >= 0
y(3,3) <= 1
y(3,4) >= 0
y(3,4) <= 1
#+end_example

** Generator
*** Utilities
A small utility to generate all the parameter combinations from the
parameter domains. It expands, for example ~((1 2) (5 7))~ which
indicates two parameters, the first with domain $[1,2]$ and the second
with domain $[5,7]$ into the list ~((1 5) (1 6) (1 7) (2 5) (2 6) (2
7))~. Each one of those will be an instance to generate.
#+BEGIN_SRC lisp :tangle "generator.lisp"
  (defun range-to-list (param)
    "Param could be one of three forms (a) (a b) (a b c ... d). We
  expand the second into the third if a < b+1."
    (if (not (= 2 (length param)))
        param
        (loop :for i :from (first param) :to (second param) :collect i)))
#+END_SRC

#+RESULTS:
: RANGE-TO-LIST
#+BEGIN_SRC lisp
(list (range-to-list '(3)) (range-to-list '(3 4 5)) (range-to-list '(3 7)))
#+END_SRC

#+RESULTS:
| 3 |   |   |   |   |
| 3 | 4 | 5 |   |   |
| 3 | 4 | 5 | 6 | 7 |


#+BEGIN_SRC lisp :tangle "generator.lisp"
  (defun generate-param-list (params)
    (if (= 1 (length params))
        (mapcar #'list (range-to-list (car params)))
        (let ((l))
          (dolist (first (range-to-list (car params)) (nreverse l))
            (dolist (others (generate-param-list (cdr params)))
              (push (cons first others) l))))))
#+END_SRC

#+RESULTS:
: GENERATE-PARAM-LIST

#+BEGIN_SRC lisp 
(generate-param-list '((2) (3 6) (7 8)))
#+END_SRC

#+RESULTS:
| 2 | 3 | 7 |
| 2 | 3 | 8 |
| 2 | 4 | 7 |
| 2 | 4 | 8 |
| 2 | 5 | 7 |
| 2 | 5 | 8 |
| 2 | 6 | 7 |
| 2 | 6 | 8 |

*** Constraint: at-least
The ~at-least~ constraint accepts four parameters ~at-least(m,n,k,l)~ and means
: at_least_m(x_1, x_2, x_n) = k  x_i in [0,..,l]
Its generator must return the matrix of linear constraints ~C,me,n~, where the first ~me~ rows are
: b = a_1 x_1 + ... + a_{kl} y_{kl} 
end the next ~m-me~ rows are
: b <= a_1 x_1 + ... + a_{kl} y_{kl} 
The nv is the number of variables considered 'real', i.e. the $x_1,
\ldots, x_n$ in this case.

First, a mapping from the variables $y_{ij}$ into $[n,n+(l+1)n]$.
#+BEGIN_SRC lisp
  (defun get-var-index (n l i j)
    (+ n (* (1- i) (1+ l)) j))
#+END_SRC

#+RESULTS:
: GET-VAR-INDEX

#+BEGIN_SRC lisp
(equalp '(3 4 9) (list (get-var-index 3 4 1 0) (get-var-index 3 4 1 1) (get-var-index 3 4 2 1)))
#+END_SRC

#+RESULTS:
: T

#+BEGIN_SRC lisp
  (defun gen-at-least (m n k l)
    (labels ((var-index (i j) (+ n 1 (* (1- i) (1+ l)) j)))
    (let ((I (loop :for i :from 1 :to n :collect i))
          (J (loop :for j :from 0 :to l :collect j))
          (columns (+ 1 n (* n (1+ l))))
          (C nil))
      (dolist (ii I)
        (let ((row (new-row columns)))
          (setf (aref row ii) -1)
          (dolist (jj J)
            (setf (aref row (var-index ii jj)) jj))
          (push row C))
        (let ((row (new-row columns)))
          (setf (aref row 0) 1)
          (dolist (jj J)
            (setf (aref row (var-index ii jj)) 1))
          (push row C)))
      (let ((row (new-row columns)))
        (setf (aref row 0) m)
        (dolist (ii I)
          (setf (aref row (var-index ii k)) 1))
        (push row C))
      (dolist (ii I)
        (dolist (jj J)
          (let ((row0 (new-row columns))
                (row1 (new-row columns)))
            (setf (aref row0 (var-index ii jj)) 1)
            (push row0 C)
            (setf (aref row1 (var-index ii jj)) -1)
            (setf (aref row1 0) -1)
            (push row1 C))))
      (values (nreverse C) (+ n n 1) n))))
#+END_SRC

#+RESULTS:
: GEN-AT-LEAST

*** Constraint data structure
#+BEGIN_SRC lisp
  (defun new-row (l)
    (make-array l :initial-element 0 :element-type 'rational))
#+END_SRC

#+RESULTS:
: NEW-MATRIX

** Mainline
The  driver of the generator accepts a list of parameters with their
domains, along with a function that does the generating.  From this it
generates all the instances of all parameters' domains and outputs
into a subdirectory of instances.
#+BEGIN_SRC lisp :tangle "generator.lisp"
  (defun generate-instances-and-output (params generator &optional (filename "instance"))
    (dolist (param (generate-param-list params))
      (with-open-file (out (format nil "./instances/~a~{-~d~}" filename param)
                           :direction :output :if-exists :supersede)
        (let ((*standard-output* out))
          (apply generator param)))))
#+END_SRC

#+RESULTS:
: GENERATE-INSTANCES

#+BEGIN_SRC lisp :session :results output
(generate-instances-and-output '((1) (3) (2 3) (4)) #'output-at-least "at-least")
#+END_SRC

#+RESULTS:


